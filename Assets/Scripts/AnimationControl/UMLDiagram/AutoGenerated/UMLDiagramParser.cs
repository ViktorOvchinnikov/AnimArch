//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from UMLDiagram.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class UMLDiagramParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, NAME=20, COMMENT=21, WHITE_SPACE=22;
	public const int
		RULE_diagram = 0, RULE_element = 1, RULE_classDefinition = 2, RULE_classBody = 3, 
		RULE_classMember = 4, RULE_method = 5, RULE_attribute = 6, RULE_methodArguments = 7, 
		RULE_methodArgument = 8, RULE_relation = 9, RULE_relationType = 10, RULE_visibility = 11, 
		RULE_className = 12, RULE_methodName = 13, RULE_argumentName = 14, RULE_returnType = 15, 
		RULE_attributeName = 16, RULE_type = 17;
	public static readonly string[] ruleNames = {
		"diagram", "element", "classDefinition", "classBody", "classMember", "method", 
		"attribute", "methodArguments", "methodArgument", "relation", "relationType", 
		"visibility", "className", "methodName", "argumentName", "returnType", 
		"attributeName", "type"
	};

	private static readonly string[] _LiteralNames = {
		null, "'@startuml'", "'@enduml'", "'class'", "'{'", "'}'", "'('", "')'", 
		"':'", "','", "'<|..'", "'-->'", "'<--'", "'<-->'", "'--'", "'..>'", "'<|--'", 
		"'+'", "'-'", "'#'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, "NAME", "COMMENT", "WHITE_SPACE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "UMLDiagram.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static UMLDiagramParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public UMLDiagramParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public UMLDiagramParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class DiagramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(UMLDiagramParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ElementContext[] element() {
			return GetRuleContexts<ElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElementContext element(int i) {
			return GetRuleContext<ElementContext>(i);
		}
		public DiagramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_diagram; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUMLDiagramListener typedListener = listener as IUMLDiagramListener;
			if (typedListener != null) typedListener.EnterDiagram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUMLDiagramListener typedListener = listener as IUMLDiagramListener;
			if (typedListener != null) typedListener.ExitDiagram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUMLDiagramVisitor<TResult> typedVisitor = visitor as IUMLDiagramVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDiagram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DiagramContext diagram() {
		DiagramContext _localctx = new DiagramContext(Context, State);
		EnterRule(_localctx, 0, RULE_diagram);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 36;
			Match(T__0);
			State = 40;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__2 || _la==NAME) {
				{
				{
				State = 37;
				element();
				}
				}
				State = 42;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 43;
			Match(T__1);
			State = 44;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassDefinitionContext classDefinition() {
			return GetRuleContext<ClassDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelationContext relation() {
			return GetRuleContext<RelationContext>(0);
		}
		public ElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_element; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUMLDiagramListener typedListener = listener as IUMLDiagramListener;
			if (typedListener != null) typedListener.EnterElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUMLDiagramListener typedListener = listener as IUMLDiagramListener;
			if (typedListener != null) typedListener.ExitElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUMLDiagramVisitor<TResult> typedVisitor = visitor as IUMLDiagramVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementContext element() {
		ElementContext _localctx = new ElementContext(Context, State);
		EnterRule(_localctx, 2, RULE_element);
		try {
			State = 48;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__2:
				EnterOuterAlt(_localctx, 1);
				{
				State = 46;
				classDefinition();
				}
				break;
			case NAME:
				EnterOuterAlt(_localctx, 2);
				{
				State = 47;
				relation();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassNameContext className() {
			return GetRuleContext<ClassNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassBodyContext classBody() {
			return GetRuleContext<ClassBodyContext>(0);
		}
		public ClassDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUMLDiagramListener typedListener = listener as IUMLDiagramListener;
			if (typedListener != null) typedListener.EnterClassDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUMLDiagramListener typedListener = listener as IUMLDiagramListener;
			if (typedListener != null) typedListener.ExitClassDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUMLDiagramVisitor<TResult> typedVisitor = visitor as IUMLDiagramVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassDefinitionContext classDefinition() {
		ClassDefinitionContext _localctx = new ClassDefinitionContext(Context, State);
		EnterRule(_localctx, 4, RULE_classDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 50;
			Match(T__2);
			State = 51;
			className();
			State = 52;
			Match(T__3);
			State = 53;
			classBody();
			State = 54;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassMemberContext[] classMember() {
			return GetRuleContexts<ClassMemberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassMemberContext classMember(int i) {
			return GetRuleContext<ClassMemberContext>(i);
		}
		public ClassBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUMLDiagramListener typedListener = listener as IUMLDiagramListener;
			if (typedListener != null) typedListener.EnterClassBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUMLDiagramListener typedListener = listener as IUMLDiagramListener;
			if (typedListener != null) typedListener.ExitClassBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUMLDiagramVisitor<TResult> typedVisitor = visitor as IUMLDiagramVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassBodyContext classBody() {
		ClassBodyContext _localctx = new ClassBodyContext(Context, State);
		EnterRule(_localctx, 6, RULE_classBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 59;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__16) | (1L << T__17) | (1L << T__18))) != 0)) {
				{
				{
				State = 56;
				classMember();
				}
				}
				State = 61;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassMemberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MethodContext method() {
			return GetRuleContext<MethodContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext attribute() {
			return GetRuleContext<AttributeContext>(0);
		}
		public ClassMemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classMember; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUMLDiagramListener typedListener = listener as IUMLDiagramListener;
			if (typedListener != null) typedListener.EnterClassMember(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUMLDiagramListener typedListener = listener as IUMLDiagramListener;
			if (typedListener != null) typedListener.ExitClassMember(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUMLDiagramVisitor<TResult> typedVisitor = visitor as IUMLDiagramVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassMember(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassMemberContext classMember() {
		ClassMemberContext _localctx = new ClassMemberContext(Context, State);
		EnterRule(_localctx, 8, RULE_classMember);
		try {
			State = 64;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 62;
				method();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 63;
				attribute();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodNameContext methodName() {
			return GetRuleContext<MethodNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnTypeContext returnType() {
			return GetRuleContext<ReturnTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodArgumentsContext methodArguments() {
			return GetRuleContext<MethodArgumentsContext>(0);
		}
		public MethodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUMLDiagramListener typedListener = listener as IUMLDiagramListener;
			if (typedListener != null) typedListener.EnterMethod(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUMLDiagramListener typedListener = listener as IUMLDiagramListener;
			if (typedListener != null) typedListener.ExitMethod(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUMLDiagramVisitor<TResult> typedVisitor = visitor as IUMLDiagramVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethod(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodContext method() {
		MethodContext _localctx = new MethodContext(Context, State);
		EnterRule(_localctx, 10, RULE_method);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 66;
			visibility();
			State = 67;
			methodName();
			State = 68;
			Match(T__5);
			State = 70;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NAME) {
				{
				State = 69;
				methodArguments();
				}
			}

			State = 72;
			Match(T__6);
			State = 73;
			Match(T__7);
			State = 74;
			returnType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeNameContext attributeName() {
			return GetRuleContext<AttributeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUMLDiagramListener typedListener = listener as IUMLDiagramListener;
			if (typedListener != null) typedListener.EnterAttribute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUMLDiagramListener typedListener = listener as IUMLDiagramListener;
			if (typedListener != null) typedListener.ExitAttribute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUMLDiagramVisitor<TResult> typedVisitor = visitor as IUMLDiagramVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeContext attribute() {
		AttributeContext _localctx = new AttributeContext(Context, State);
		EnterRule(_localctx, 12, RULE_attribute);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 76;
			visibility();
			State = 77;
			attributeName();
			State = 80;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__7) {
				{
				State = 78;
				Match(T__7);
				State = 79;
				type();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodArgumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MethodArgumentContext[] methodArgument() {
			return GetRuleContexts<MethodArgumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodArgumentContext methodArgument(int i) {
			return GetRuleContext<MethodArgumentContext>(i);
		}
		public MethodArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodArguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUMLDiagramListener typedListener = listener as IUMLDiagramListener;
			if (typedListener != null) typedListener.EnterMethodArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUMLDiagramListener typedListener = listener as IUMLDiagramListener;
			if (typedListener != null) typedListener.ExitMethodArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUMLDiagramVisitor<TResult> typedVisitor = visitor as IUMLDiagramVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodArgumentsContext methodArguments() {
		MethodArgumentsContext _localctx = new MethodArgumentsContext(Context, State);
		EnterRule(_localctx, 14, RULE_methodArguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 82;
			methodArgument();
			State = 87;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__8) {
				{
				{
				State = 83;
				Match(T__8);
				State = 84;
				methodArgument();
				}
				}
				State = 89;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodArgumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentNameContext argumentName() {
			return GetRuleContext<ArgumentNameContext>(0);
		}
		public MethodArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodArgument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUMLDiagramListener typedListener = listener as IUMLDiagramListener;
			if (typedListener != null) typedListener.EnterMethodArgument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUMLDiagramListener typedListener = listener as IUMLDiagramListener;
			if (typedListener != null) typedListener.ExitMethodArgument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUMLDiagramVisitor<TResult> typedVisitor = visitor as IUMLDiagramVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodArgumentContext methodArgument() {
		MethodArgumentContext _localctx = new MethodArgumentContext(Context, State);
		EnterRule(_localctx, 16, RULE_methodArgument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 90;
			type();
			State = 91;
			argumentName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassNameContext[] className() {
			return GetRuleContexts<ClassNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassNameContext className(int i) {
			return GetRuleContext<ClassNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelationTypeContext relationType() {
			return GetRuleContext<RelationTypeContext>(0);
		}
		public RelationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUMLDiagramListener typedListener = listener as IUMLDiagramListener;
			if (typedListener != null) typedListener.EnterRelation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUMLDiagramListener typedListener = listener as IUMLDiagramListener;
			if (typedListener != null) typedListener.ExitRelation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUMLDiagramVisitor<TResult> typedVisitor = visitor as IUMLDiagramVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelationContext relation() {
		RelationContext _localctx = new RelationContext(Context, State);
		EnterRule(_localctx, 18, RULE_relation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 93;
			className();
			State = 94;
			relationType();
			State = 95;
			className();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelationTypeContext : ParserRuleContext {
		public RelationTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relationType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUMLDiagramListener typedListener = listener as IUMLDiagramListener;
			if (typedListener != null) typedListener.EnterRelationType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUMLDiagramListener typedListener = listener as IUMLDiagramListener;
			if (typedListener != null) typedListener.ExitRelationType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUMLDiagramVisitor<TResult> typedVisitor = visitor as IUMLDiagramVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelationTypeContext relationType() {
		RelationTypeContext _localctx = new RelationTypeContext(Context, State);
		EnterRule(_localctx, 20, RULE_relationType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 97;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << T__15))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VisibilityContext : ParserRuleContext {
		public VisibilityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_visibility; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUMLDiagramListener typedListener = listener as IUMLDiagramListener;
			if (typedListener != null) typedListener.EnterVisibility(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUMLDiagramListener typedListener = listener as IUMLDiagramListener;
			if (typedListener != null) typedListener.ExitVisibility(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUMLDiagramVisitor<TResult> typedVisitor = visitor as IUMLDiagramVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVisibility(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VisibilityContext visibility() {
		VisibilityContext _localctx = new VisibilityContext(Context, State);
		EnterRule(_localctx, 22, RULE_visibility);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 99;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__16) | (1L << T__17) | (1L << T__18))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(UMLDiagramParser.NAME, 0); }
		public ClassNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_className; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUMLDiagramListener typedListener = listener as IUMLDiagramListener;
			if (typedListener != null) typedListener.EnterClassName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUMLDiagramListener typedListener = listener as IUMLDiagramListener;
			if (typedListener != null) typedListener.ExitClassName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUMLDiagramVisitor<TResult> typedVisitor = visitor as IUMLDiagramVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassNameContext className() {
		ClassNameContext _localctx = new ClassNameContext(Context, State);
		EnterRule(_localctx, 24, RULE_className);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 101;
			Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(UMLDiagramParser.NAME, 0); }
		public MethodNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUMLDiagramListener typedListener = listener as IUMLDiagramListener;
			if (typedListener != null) typedListener.EnterMethodName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUMLDiagramListener typedListener = listener as IUMLDiagramListener;
			if (typedListener != null) typedListener.ExitMethodName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUMLDiagramVisitor<TResult> typedVisitor = visitor as IUMLDiagramVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodNameContext methodName() {
		MethodNameContext _localctx = new MethodNameContext(Context, State);
		EnterRule(_localctx, 26, RULE_methodName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 103;
			Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(UMLDiagramParser.NAME, 0); }
		public ArgumentNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUMLDiagramListener typedListener = listener as IUMLDiagramListener;
			if (typedListener != null) typedListener.EnterArgumentName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUMLDiagramListener typedListener = listener as IUMLDiagramListener;
			if (typedListener != null) typedListener.ExitArgumentName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUMLDiagramVisitor<TResult> typedVisitor = visitor as IUMLDiagramVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentNameContext argumentName() {
		ArgumentNameContext _localctx = new ArgumentNameContext(Context, State);
		EnterRule(_localctx, 28, RULE_argumentName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 105;
			Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(UMLDiagramParser.NAME, 0); }
		public ReturnTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUMLDiagramListener typedListener = listener as IUMLDiagramListener;
			if (typedListener != null) typedListener.EnterReturnType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUMLDiagramListener typedListener = listener as IUMLDiagramListener;
			if (typedListener != null) typedListener.ExitReturnType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUMLDiagramVisitor<TResult> typedVisitor = visitor as IUMLDiagramVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnTypeContext returnType() {
		ReturnTypeContext _localctx = new ReturnTypeContext(Context, State);
		EnterRule(_localctx, 30, RULE_returnType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 107;
			Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(UMLDiagramParser.NAME, 0); }
		public AttributeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUMLDiagramListener typedListener = listener as IUMLDiagramListener;
			if (typedListener != null) typedListener.EnterAttributeName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUMLDiagramListener typedListener = listener as IUMLDiagramListener;
			if (typedListener != null) typedListener.ExitAttributeName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUMLDiagramVisitor<TResult> typedVisitor = visitor as IUMLDiagramVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttributeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeNameContext attributeName() {
		AttributeNameContext _localctx = new AttributeNameContext(Context, State);
		EnterRule(_localctx, 32, RULE_attributeName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 109;
			Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(UMLDiagramParser.NAME, 0); }
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUMLDiagramListener typedListener = listener as IUMLDiagramListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUMLDiagramListener typedListener = listener as IUMLDiagramListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUMLDiagramVisitor<TResult> typedVisitor = visitor as IUMLDiagramVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 34, RULE_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 111;
			Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x18', 't', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x3', '\x2', '\x3', '\x2', '\a', '\x2', ')', '\n', '\x2', '\f', 
		'\x2', '\xE', '\x2', ',', '\v', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '\x33', '\n', '\x3', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x5', '\a', '\x5', '<', '\n', '\x5', '\f', '\x5', 
		'\xE', '\x5', '?', '\v', '\x5', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', 
		'\x43', '\n', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x5', '\a', 'I', '\n', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x5', '\b', 
		'S', '\n', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\a', '\t', 'X', 
		'\n', '\t', '\f', '\t', '\xE', '\t', '[', '\v', '\t', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x2', '\x2', '\x14', '\x2', '\x4', '\x6', '\b', 
		'\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', 
		'\x1E', ' ', '\"', '$', '\x2', '\x4', '\x3', '\x2', '\f', '\x12', '\x3', 
		'\x2', '\x13', '\x15', '\x2', 'h', '\x2', '&', '\x3', '\x2', '\x2', '\x2', 
		'\x4', '\x32', '\x3', '\x2', '\x2', '\x2', '\x6', '\x34', '\x3', '\x2', 
		'\x2', '\x2', '\b', '=', '\x3', '\x2', '\x2', '\x2', '\n', '\x42', '\x3', 
		'\x2', '\x2', '\x2', '\f', '\x44', '\x3', '\x2', '\x2', '\x2', '\xE', 
		'N', '\x3', '\x2', '\x2', '\x2', '\x10', 'T', '\x3', '\x2', '\x2', '\x2', 
		'\x12', '\\', '\x3', '\x2', '\x2', '\x2', '\x14', '_', '\x3', '\x2', '\x2', 
		'\x2', '\x16', '\x63', '\x3', '\x2', '\x2', '\x2', '\x18', '\x65', '\x3', 
		'\x2', '\x2', '\x2', '\x1A', 'g', '\x3', '\x2', '\x2', '\x2', '\x1C', 
		'i', '\x3', '\x2', '\x2', '\x2', '\x1E', 'k', '\x3', '\x2', '\x2', '\x2', 
		' ', 'm', '\x3', '\x2', '\x2', '\x2', '\"', 'o', '\x3', '\x2', '\x2', 
		'\x2', '$', 'q', '\x3', '\x2', '\x2', '\x2', '&', '*', '\a', '\x3', '\x2', 
		'\x2', '\'', ')', '\x5', '\x4', '\x3', '\x2', '(', '\'', '\x3', '\x2', 
		'\x2', '\x2', ')', ',', '\x3', '\x2', '\x2', '\x2', '*', '(', '\x3', '\x2', 
		'\x2', '\x2', '*', '+', '\x3', '\x2', '\x2', '\x2', '+', '-', '\x3', '\x2', 
		'\x2', '\x2', ',', '*', '\x3', '\x2', '\x2', '\x2', '-', '.', '\a', '\x4', 
		'\x2', '\x2', '.', '/', '\a', '\x2', '\x2', '\x3', '/', '\x3', '\x3', 
		'\x2', '\x2', '\x2', '\x30', '\x33', '\x5', '\x6', '\x4', '\x2', '\x31', 
		'\x33', '\x5', '\x14', '\v', '\x2', '\x32', '\x30', '\x3', '\x2', '\x2', 
		'\x2', '\x32', '\x31', '\x3', '\x2', '\x2', '\x2', '\x33', '\x5', '\x3', 
		'\x2', '\x2', '\x2', '\x34', '\x35', '\a', '\x5', '\x2', '\x2', '\x35', 
		'\x36', '\x5', '\x1A', '\xE', '\x2', '\x36', '\x37', '\a', '\x6', '\x2', 
		'\x2', '\x37', '\x38', '\x5', '\b', '\x5', '\x2', '\x38', '\x39', '\a', 
		'\a', '\x2', '\x2', '\x39', '\a', '\x3', '\x2', '\x2', '\x2', ':', '<', 
		'\x5', '\n', '\x6', '\x2', ';', ':', '\x3', '\x2', '\x2', '\x2', '<', 
		'?', '\x3', '\x2', '\x2', '\x2', '=', ';', '\x3', '\x2', '\x2', '\x2', 
		'=', '>', '\x3', '\x2', '\x2', '\x2', '>', '\t', '\x3', '\x2', '\x2', 
		'\x2', '?', '=', '\x3', '\x2', '\x2', '\x2', '@', '\x43', '\x5', '\f', 
		'\a', '\x2', '\x41', '\x43', '\x5', '\xE', '\b', '\x2', '\x42', '@', '\x3', 
		'\x2', '\x2', '\x2', '\x42', '\x41', '\x3', '\x2', '\x2', '\x2', '\x43', 
		'\v', '\x3', '\x2', '\x2', '\x2', '\x44', '\x45', '\x5', '\x18', '\r', 
		'\x2', '\x45', '\x46', '\x5', '\x1C', '\xF', '\x2', '\x46', 'H', '\a', 
		'\b', '\x2', '\x2', 'G', 'I', '\x5', '\x10', '\t', '\x2', 'H', 'G', '\x3', 
		'\x2', '\x2', '\x2', 'H', 'I', '\x3', '\x2', '\x2', '\x2', 'I', 'J', '\x3', 
		'\x2', '\x2', '\x2', 'J', 'K', '\a', '\t', '\x2', '\x2', 'K', 'L', '\a', 
		'\n', '\x2', '\x2', 'L', 'M', '\x5', ' ', '\x11', '\x2', 'M', '\r', '\x3', 
		'\x2', '\x2', '\x2', 'N', 'O', '\x5', '\x18', '\r', '\x2', 'O', 'R', '\x5', 
		'\"', '\x12', '\x2', 'P', 'Q', '\a', '\n', '\x2', '\x2', 'Q', 'S', '\x5', 
		'$', '\x13', '\x2', 'R', 'P', '\x3', '\x2', '\x2', '\x2', 'R', 'S', '\x3', 
		'\x2', '\x2', '\x2', 'S', '\xF', '\x3', '\x2', '\x2', '\x2', 'T', 'Y', 
		'\x5', '\x12', '\n', '\x2', 'U', 'V', '\a', '\v', '\x2', '\x2', 'V', 'X', 
		'\x5', '\x12', '\n', '\x2', 'W', 'U', '\x3', '\x2', '\x2', '\x2', 'X', 
		'[', '\x3', '\x2', '\x2', '\x2', 'Y', 'W', '\x3', '\x2', '\x2', '\x2', 
		'Y', 'Z', '\x3', '\x2', '\x2', '\x2', 'Z', '\x11', '\x3', '\x2', '\x2', 
		'\x2', '[', 'Y', '\x3', '\x2', '\x2', '\x2', '\\', ']', '\x5', '$', '\x13', 
		'\x2', ']', '^', '\x5', '\x1E', '\x10', '\x2', '^', '\x13', '\x3', '\x2', 
		'\x2', '\x2', '_', '`', '\x5', '\x1A', '\xE', '\x2', '`', '\x61', '\x5', 
		'\x16', '\f', '\x2', '\x61', '\x62', '\x5', '\x1A', '\xE', '\x2', '\x62', 
		'\x15', '\x3', '\x2', '\x2', '\x2', '\x63', '\x64', '\t', '\x2', '\x2', 
		'\x2', '\x64', '\x17', '\x3', '\x2', '\x2', '\x2', '\x65', '\x66', '\t', 
		'\x3', '\x2', '\x2', '\x66', '\x19', '\x3', '\x2', '\x2', '\x2', 'g', 
		'h', '\a', '\x16', '\x2', '\x2', 'h', '\x1B', '\x3', '\x2', '\x2', '\x2', 
		'i', 'j', '\a', '\x16', '\x2', '\x2', 'j', '\x1D', '\x3', '\x2', '\x2', 
		'\x2', 'k', 'l', '\a', '\x16', '\x2', '\x2', 'l', '\x1F', '\x3', '\x2', 
		'\x2', '\x2', 'm', 'n', '\a', '\x16', '\x2', '\x2', 'n', '!', '\x3', '\x2', 
		'\x2', '\x2', 'o', 'p', '\a', '\x16', '\x2', '\x2', 'p', '#', '\x3', '\x2', 
		'\x2', '\x2', 'q', 'r', '\a', '\x16', '\x2', '\x2', 'r', '%', '\x3', '\x2', 
		'\x2', '\x2', '\t', '*', '\x32', '=', '\x42', 'H', 'R', 'Y',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
